--- a/src-tauri/src/commands/agents.rs
+++ b/src-tauri/src/commands/agents.rs
@@ -1561,15 +1561,35 @@ pub async fn get_session_output(
     }
 
     // Get the Claude directory
-    let claude_dir = dirs::home_dir()
-        .ok_or("Failed to get home directory")?
-        .join(".claude");
+    // On Windows, check WSL path instead of Windows path
+    let projects_dir = if cfg!(target_os = "windows") {
+        // Try WSL path first
+        let wsl_user = std::env::var("USER").unwrap_or_else(|_| "root".to_string());
+        let wsl_path = format!("\\\\wsl$\\Ubuntu\\home\\{}\\", wsl_user);
+        let wsl_home = std::path::PathBuf::from(&wsl_path);
+        
+        if wsl_home.exists() {
+            wsl_home.join(".claude").join("projects")
+        } else {
+            // Fallback to Windows path if WSL path doesn't exist
+            dirs::home_dir()
+                .ok_or("Failed to get home directory")?
+                .join(".claude")
+                .join("projects")
+        }
+    } else {
+        dirs::home_dir()
+            .ok_or("Failed to get home directory")?
+            .join(".claude")
+            .join("projects")
+    };
 
     // Find the correct project directory by searching for the session file
-    let projects_dir = claude_dir.join("projects");
-    
     // Check if projects directory exists
     if !projects_dir.exists() {
-        log::error!("Projects directory not found at: {:?}", projects_dir);
+        // Don't log as error, just info - this is expected when projects haven't been created yet
+        log::info!("Projects directory not found at: {:?}, returning empty output", projects_dir);
+        // Return empty instead of error to prevent continuous error messages
         return Err("Projects directory not found".to_string());
     }
 
@@ -2220,15 +2240,34 @@ pub async fn load_agent_session_history(
 ) -> Result<Vec<serde_json::Value>, String> {
     log::info!("Loading agent session history for session: {}", session_id);
 
-    let claude_dir = dirs::home_dir()
-        .ok_or("Failed to get home directory")?
-        .join(".claude");
-
-    let projects_dir = claude_dir.join("projects");
+    // Get the Claude directory - handle Windows/WSL path translation
+    let projects_dir = if cfg!(target_os = "windows") {
+        // Try WSL path first
+        let wsl_user = std::env::var("USER").unwrap_or_else(|_| "root".to_string());
+        let wsl_path = format!("\\\\wsl$\\Ubuntu\\home\\{}\\", wsl_user);
+        let wsl_home = std::path::PathBuf::from(&wsl_path);
+        
+        if wsl_home.exists() {
+            wsl_home.join(".claude").join("projects")
+        } else {
+            // Fallback to Windows path if WSL path doesn't exist
+            dirs::home_dir()
+                .ok_or("Failed to get home directory")?
+                .join(".claude")
+                .join("projects")
+        }
+    } else {
+        dirs::home_dir()
+            .ok_or("Failed to get home directory")?
+            .join(".claude")
+            .join("projects")
+    };
     
     if !projects_dir.exists() {
-        log::error!("Projects directory not found at: {:?}", projects_dir);
-        return Err("Projects directory not found".to_string());
+        // Don't log as error, just info
+        log::info!("Projects directory not found at: {:?}", projects_dir);
+        // Return empty list instead of error
+        return Ok(Vec::new());
     }
 
     // Search for the session file in all project directories